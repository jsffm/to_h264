#!/bin/bash

# Can't write packet with unknown timestamp	mp4

#set -x

crf=21          # Qualität, default 23, kleiner ist besser
#copyts="-copyts"
#gopt="-flags +global_header"
#gopt="-fflags +genpts"
#gopt="-fflags +genpts -copytb 1"
#gopt="-fflags +genpts -copytb 0"
#flags="-fflags +genpts"
#flags="-flags +global_header"
flags="-copytb 1"
#flags="-vf setpts=N"

#dts=eac3
dts=copy
pcm=aac

outf=mkv
#outf=mp4
#outf=ts

#test="-t 300"

aaclib="libfdk_aac" # Fraunhofer Library

start=$(date +"%s")

bdir=$1
playlist=$2
fn=$(basename $PWD)

t=/tmp/BD
log=logfile-$playlist

echo BD2mkv > $log

details=$bdir/details.txt

if [ "$playlist" = "" ]
then
    if [ -e $details ]
    then
	cat $details
	#cp -p $details .
	iconv -f ISO-8859-1 -t UTF-8 < $details > details.txt
	i=0
	while read line
	do
	    echo -n $i" "
	    echo $line | cut -d ';' -f 1
	    i=$(($i+1))
	done < details.txt
    fi
    ffmpeg -hide_banner -i bluray:$bdir 2> $t
    grep -a playlist $t
    exit
fi

echo "playlist=$playlist" >> $log
#set -x
ofile=$fn-$playlist.$outf
if [ -e $details ]
then
    n=$(($playlist+1))
    #sed -n $n"p" $details >> $log
    z=$(sed -n $n"p" $details)
    echo $z >> $log
    ofile=$(echo $z | cut -d ';' -f 1)
    ofile=$(echo $ofile | iconv -f ISO-8859-15 -t UTF-8)
    #ofile=${ofile/_/ /}
    ofile=$(echo $ofile|tr ' ' '_').$outf
fi
#exit

#set -x
#mpls=$bdir/BDMV/PLAYLIST/0000$playlist.mpls
mpls=$(printf "$bdir/BDMV/PLAYLIST/%05d.mpls" $playlist)
ls -l --time-style=long-iso $mpls >> $log
td=$(ls -l --time-style="+%Y%m%d%H%M" $mpls|cut -d \  -f 6)
#exit

nix()
{
mpls=$bdir/BDMV/PLAYLIST/0000$playlist.mpls
mplso=mediainfo.txt
mediainfo $mpls > $mplso
s=-1
while read line
do
    w1=$(echo $line|cut -d ':' -f 1)
    #if [ "$w1" == "ID " ]
    #then
    case $w1 in
	"ID ")
	    w2=$(echo $line|cut -d ':' -f 2)
	    id=$(echo $w2|cut -d \( -f 2)
	    id=$(echo $id|cut -d \) -f 1)
	    s=$(($s+1))
	    ida[$s]=$id
	    ;;
	"Language ")
	    w2=$(echo $line|cut -d ':' -f 2)
	    langa[$s]=$w2
	    ;;
    esac
    #fi
done < $mplso
#exit
}

#set -x
#   <scene entry_point="0000:00:00"> <scenetype> <name>Chapter #1</name> </scenetype> </scene>
chap_list="$bdir/BDMV/META/ES/esmt_deu_0000$playlist.xml"
meta=ffmetadata
echo ";FFMETADATA1" > $meta
echo "title=$fn" >> $meta
if [ -e $chap_list ]
then
while read line
do
    #echo $line
    l=$(echo $line)
    if [ ${l:0:6} == "<scene" ]
    then
	#echo $l
	e=${l##*entry_point=}
	e=$(echo $e|cut -d '>' -f 1)
	ctitle=${l##*<name>}
	ctitle=$(echo $ctitle|cut -d '<' -f 1)
	hh=${e:3:2}
	mm=${e:6:2}
	ss=${e:9:2}
	s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
	#date -u -d @$s
	s=$(($s*1000))
	if [ "$sa" != "" ]
	then
	    echo "[CHAPTER]" >> $meta
	    echo "TIMEBASE=1/1000" >> $meta
	    echo "START="$sa >> $meta
	    echo "#chapter ends at" $e >> $meta
	    echo "END="$s >> $meta
	    echo "title="$ctitle_a >> $meta
	fi
	sa=$s
	ctitle_a=$ctitle
    fi
done < $chap_list
else
chapt_mediainfo() {
#set -x
mi=mediainfo.txt
mediainfo $mpls > $mi
found=0
while read line
do
    if  [ "$line" == "" ]
    then
	found=0
    fi
    if [ $found == 1 ]
    then
	# 00:08:28.333 : Chapter 2
	echo $line
	ch=$line
	cht=$(echo $line|cut -d ' ' -f 1)
	chn=$(echo $line|cut -d ' ' -f 3-)
	hh=${cht:0:2}
	mm=${cht:3:2}
	ss=${cht:6:2}
	ms=${cht:9:3}
	s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
	#s=$(($s*1000+$ms))
	s="$s$ms"
	if [ "$cha" != "" ]
	then
	    echo "[CHAPTER]" >> $meta
	    echo "TIMEBASE=1/1000" >> $meta
	    echo "START="$sa >> $meta
	    echo "#chapter ends at" $cht >> $meta
	    echo "END="$s >> $meta
	    echo "title="$chna >> $meta
	    #exit
	fi
	cha=$ch
	chta=$cht
	chna=$chn
	sa=$s
    fi
    if  [ "$line" == "Menu" ]
    then
	found=1
    fi
done < $mi
#set -x
dur=$(grep ^Duration $mi|head -n 1)
# Duration                                 : 1 h 27 min
dur2=$(echo $dur|cut -d ':' -f 2)
h=$(echo $dur2|cut -d \  -f 1)
m=$(echo $dur2|cut -d \  -f 3)
s=$(($h*3600+$m*60))
s=$(($s*1000))
echo "[CHAPTER]" >> $meta
echo "TIMEBASE=1/1000" >> $meta
echo "START="$sa >> $meta
echo "#chapter ends at" $dur2 >> $meta
echo "END="$s >> $meta
echo "title="$chna >> $meta
#exit
}
chapt_tsmuxer() {
    #set -x
    temp=tsmuxer.txt
    tsMuxeR $mpls > $temp
    dur=0
    while read line
    do
	if [ "${line:0:6}" == "Marks:" ]
	then
	    marks="$marks ${line:7}"
	fi
	if [ "${line:0:9}" == "Duration:" ]
	then
	    #set -x
	    # Duration: 00:26:47.055
	    dur1=${line:10:8}
	    durs=$(date -u "+%s" -d "1970-01-01 $dur1")
	    dur=$(($dur+$durs))
	    #exit
	fi
    done < $temp
    #exit
    ch=0
    for ma in $marks
    do
	#echo $ma
	hh=${ma:0:2}
	mm=${ma:3:2}
	ss=${ma:6:2}
	ms=${ma:9:3}
	#s=$(($h*3600+$m*60))
	s=$(date -u "+%s" -d "1970-01-01 $hh:$mm:$ss")
	s="$s$ms"
	if [ $s -gt 0 ]
	then
	    echo "[CHAPTER]" >> $meta
	    echo "TIMEBASE=1/1000" >> $meta
	    echo "START="$sa >> $meta
	    echo "#chapter ends at" $ma >> $meta
	    echo "END="$s >> $meta
	    echo "title=Chapter "$ch >> $meta
	fi
	ch=$(($ch+1))
	sa=$s
	#exit
    done
    echo "[CHAPTER]" >> $meta
    echo "TIMEBASE=1/1000" >> $meta
    echo "START="$sa >> $meta
    echo "#chapter ends at" $ma >> $meta
    echo "END="$dur"000" >> $meta
    echo "title=Chapter "$ch >> $meta
    #exit
}
chapt_mediainfo
#chapt_tsmuxer
#exit
fi

ffmpeg -hide_banner -playlist $playlist -i bluray:$bdir 2>&1 | grep -a -v libbluray >> $log
ffmpeg -hide_banner -playlist $playlist -i bluray:$bdir 2>&1 | grep -a Stream > $t
cat $t
#cat $t >> $log
#exit

# Stream #0:0[0x1011]: Video: vc1 (Advanced) (VC-1 / 0x312D4356), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9], 29.97 fps, 29.97 tbr, 90k tbn, 59.94 tbc
# Stream #0:1[0x1100](deu): Audio: ac3 (AC-3 / 0x332D4341), 48000 Hz, 5.1(side), fltp, 640 kb/s
# Stream #0:3[0x1102](deu): Audio: eac3 (AC-3 / 0x332D4341), 48000 Hz, 5.1(side), fltp, 640 kb/s
# Stream #0:2[0x1101]: Audio: pcm_bluray (HDMV / 0x564D4448), 48000 Hz, stereo, s16, 1536 kb/s
# Stream #0:3[0x1200]: Subtitle: hdmv_pgs_subtitle ([144][0][0][0] / 0x0090), 1920x1080

map="-map 0:v:0"
streamo=0
while read line
do
    echo $line
    typ=$(echo $line | cut -d ' ' -f 4)
    typ=${typ//,/}
    #stream=$(echo $line | cut -d ' ' -f 2 | cut -d ':' -f 2 | cut -d ':' -f 1)
    #stream=${stream:0:1}
    stream=$(echo $line | cut -d ' ' -f 2)
    stream=${stream:1:3}
    stream1=$((${stream:2:1}-1))
    case $typ in
	h264|vc1)
	    video="-c:$stream copy"
	    #br=8000
	    #br="-maxrate "$br"k"
	    level="-level 4.0"
	    preset="-preset fast -tune film -profile:v main $level -crf $crf  -bufsize 1835k"
	    #preset="$preset $gop"
	    #fps="-r 25"
	    #video="-c:v libx264 $fps $preset $deinterlace $br $scale $aspect -g 50"
	    #video="-c:$stream mpeg2video -q 3"
	    ;;
	mpeg2video)
	    #video="-c:$stream copy"
	    video="-c:v:0 copy"
	    ;;
	ac3|eac3)
	    #continue
	    #echo $stream ${langa[$stream]} >> $log
	    #map="$map -map $stream"
	    #audio="$audio -c:$stream copy"
	    map="$map -map 0:a:$stream1"
	    audio="$audio -c:a:$streamo copy"
	    streamo=$(($streamo+1))
	    ;;
	dts)
	    #echo $stream ${langa[$stream]} >> $log
	    #map="$map -map $stream"
	    #audio="$audio -c:$stream copy"
	    map="$map -map 0:a:$stream1"
	    #audio="$audio -c:a:$streamo copy"
	    if [ "$dts" == "eac3" ]
	    then
		audio="$audio -c:a:$streamo eac3 -b:a:$streamo 448k"
	    else
		audio="$audio -c:a:$streamo copy"
	    fi
	    streamo=$(($streamo+1))
	    ;;
	pcm_bluray)
	    map="$map -map 0:a:$stream1"
	    if [ "$pcm" == "aac" ]
	    then
		audio="$audio -c:a:$streamo $aaclib -b:a:$streamo 128k"
	    else
		audio="$audio -c:a:$streamo pcm_s16le"
	    fi
	    streamo=$(($streamo+1))
	    ;;
    esac
done < $t

echo "map=$map" >> $log
echo "video=$video" >> $log
echo "audio=$audio" >> $log

#exit

if [ -e "ffmetadata" ]
then
    chapt="-i ffmetadata"
fi
opt="$gopt -playlist $playlist -i bluray:$bdir $chapt $map $video $audio $copyts $flags $ofile"
#opt="$gopt -playlist $playlist -i bluray:$bdir -c:v copy -c:a copy -an $flags $ofile"
#opt="$gopt -playlist $playlist -i bluray:$bdir -map 0 -c:v copy -c:a copy -an $flags $ofile"
echo "ffmpeg $opt" >> $log
nice ffmpeg -hide_banner $test $opt 2>&1 | tee -a $log

touch -t $td $ofile

ffmpeg -hide_banner -i $ofile 2>> $log

cp -p $log $t
grep "Duration:" $t | head -n 1 >> $log
grep "Duration:" $t | tail -n 1 >> $log

#echo "Ende $d" >> $log
ende=$(date +"%s")
sek=$(($ende-$start))
min=$(($sek/60))
echo "$min Minuten" >> $log
